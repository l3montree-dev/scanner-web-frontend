variables:
    GIT_SUBMODULE_STRATEGY: recursive

stages:
    - test
    - publish
    - deploy

gitguardianscan:
    image: gitguardian/ggshield:v1.13.5@sha256:82b46a5ebda17645a8aabd3d20cfb65cd65938db4fb6d31275bc91132ff21472
    stage: test
    script: ggshield secret scan ci

jest:
    image: node:18@sha256:9d8a6466c6385e05f62f8ccf173e80209efb0ff4438f321f09ddf552b05af3ba
    stage: test
    script:
        - npm ci --include=dev
        - "npx jest --ci --reporters=default --reporters=jest-junit"
    artifacts:
        when: always
        reports:
            junit:
                - junit.xml

build-dev:
    stage: publish
    needs: [jest, gitguardianscan]
    dependencies:
        - jest
        - gitguardianscan
    variables:
        IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME
    only:
        - dev
    image:
        name: gcr.io/kaniko-project/executor:v1.9.1-debug@sha256:ac169723b2076f9d5804f4bc05c98397e286da6fdcdd5a09fdc179f06ccb3be1
        entrypoint: [""]
    script:
        - /kaniko/executor
          --cleanup
          --context $CI_PROJECT_DIR
          --dockerfile $CI_PROJECT_DIR/Dockerfile
          --destination $IMAGE_TAG
    # when: manual

build-main:
    stage: publish
    needs: [jest, gitguardianscan]
    dependencies:
        - jest
        - gitguardianscan
    variables:
        IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME
    only:
        - main
    image:
        name: gcr.io/kaniko-project/executor:v1.9.1-debug@sha256:ac169723b2076f9d5804f4bc05c98397e286da6fdcdd5a09fdc179f06ccb3be1
        entrypoint: [""]
    script:
        - /kaniko/executor
          --cleanup
          --context $CI_PROJECT_DIR
          --dockerfile $CI_PROJECT_DIR/Dockerfile
          --destination $IMAGE_TAG
    when: manual

build-tag:
    stage: publish
    needs: [jest, gitguardianscan]
    dependencies:
        - jest
        - gitguardianscan
    variables:
        IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_TAG
    only:
        - tags
    except:
        - branches
    image:
        name: gcr.io/kaniko-project/executor:v1.9.1-debug@sha256:ac169723b2076f9d5804f4bc05c98397e286da6fdcdd5a09fdc179f06ccb3be1
        entrypoint: [""]
    script:
        - /kaniko/executor
          --cleanup
          --context $CI_PROJECT_DIR
          --dockerfile $CI_PROJECT_DIR/Dockerfile
          --destination $IMAGE_TAG
    when: manual

deploy-dev:
    stage: deploy
    dependencies:
        - build-dev
    image:
        name: bitnami/kubectl:1.24.7-debian-11-r1@sha256:8441eac029c5fd42cf2b73549874d5388c3822695f3b17954b293122426cf2b3
        entrypoint: [""]
    environment:
        name: development
        url: "https://dev.ozgsec.neuland-homeland.de"
    script:
        - echo "$K8S_DEVELOPMENT_CERTIFICATE" >> ca.pem
        - kubectl --server=$K8S_DEVELOPMENT_API_URL --token=$K8S_DEVELOPMENT_TOKEN --certificate-authority=ca.pem --namespace=ozgsec rollout restart deployment/ozgsec-frontend
    only:
        - dev
    needs: [build-dev]
    # when: manual

deploy-main:
    stage: deploy
    dependencies:
        - build-main
    image:
        name: bitnami/kubectl:1.24.7-debian-11-r1@sha256:8441eac029c5fd42cf2b73549874d5388c3822695f3b17954b293122426cf2b3
        entrypoint: [""]
    environment:
        name: production
        url: "https://ozgsec.de"
    script:
        - echo "$K8S_CERTIFICATE" >> ca.pem
        - kubectl --server=$K8S_API_URL --token=$K8S_TOKEN --certificate-authority=ca.pem --namespace=ozgsec rollout restart deployment/ozgsec-frontend
    only:
        - main
    when: manual
    needs: [build-main]


helm:
  stage: test
  image: dtzar/helm-kubectl
  before_script:
    - 'helm repo add --username gitlab-ci-token --password ${CI_JOB_TOKEN} ${CI_PROJECT_NAME} ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable'
    - helm dependency update ./helm-chart
  script:
    - 'helm plugin install https://github.com/chartmuseum/helm-push.git'
    - ./helm-package-and-push.sh
