// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ScanReport {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  ipAddress String?
  duration  Int

  uri    String
  target Target @relation(fields: [uri], references: [uri], onDelete: Cascade)

  sut String?

  subResourceIntegrity  Boolean?
  noMixedContent        Boolean?
  responsibleDisclosure Boolean?
  dnsSec                Boolean?
  caa                   Boolean?
  ipv6                  Boolean?
  rpki                  Boolean?
  http                  Boolean?
  http308               Boolean?
  httpRedirectsToHttps  Boolean?

  https                 Boolean?
  hsts                  Boolean?
  hstsPreloaded         Boolean?
  contentSecurityPolicy Boolean?
  xFrameOptions         Boolean?
  xssProtection         Boolean?
  contentTypeOptions    Boolean?

  secureSessionCookies Boolean?
  tlsv1_2              Boolean?
  tlsv1_3              Boolean?

  deprecatedTLSDeactivated Boolean?
  strongKeyExchange   Boolean?
  strongCipherSuites  Boolean?

  validCertificate         Boolean?
  strongPrivateKey         Boolean?
  strongSignatureAlgorithm Boolean?

  matchesHostname         Boolean?
  notRevoked              Boolean?
  certificateTransparency Boolean?
  validCertificateChain   Boolean?

  @@index([createdAt])
  @@index([uri])
  @@map("scan_reports")
}

// the full scan report
model LastScanDetails {
  updatedAt DateTime @default(now()) @updatedAt
  details Json   @db.JsonB
  uri     String @id

  target Target @relation(fields: [uri], references: [uri], onDelete: Cascade)

  @@map("last_scan_details")
}

model Target {
  uri      String @id
  hostname String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  lastScan   BigInt?
  errorCount Int     @default(0)
  queued     Boolean @default(false)

  // pretty much the reason why this domain is part of the system at all.
  group String

  users UserDomainRelation[]

  scanReports ScanReport[]

  lastScanDetails LastScanDetails?

  @@index([group])
  @@index([lastScan])
  @@index([hostname])
  @@map("targets")
}

model UserDomainRelation {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  target Target @relation(fields: [uri], references: [uri], onDelete: Cascade)
  uri    String

  createdAt DateTime @default(now())

  @@id([userId, uri])
  @@map("user_domain_relations")
}

model User {
  id      String               @id
  role    String?
  domains UserDomainRelation[]

  @@map("users")
}

model Network {
  cidr               String  @id
  prefixLength       Int
  networkAddress     String
  startAddressNumber BigInt
  endAddressNumber   BigInt
  comment            String?

  @@map("networks")
}

model Stat {
  subject String
  time    BigInt
  value   Json

  @@id([subject, time])
  @@map("stats")
}

model Email {
  email String @id

  @@map("emails")
}
